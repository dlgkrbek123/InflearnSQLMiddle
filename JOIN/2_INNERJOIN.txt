- [카테시안곱.png]를 참조

SELECT * 
FROM Users, Orders;

- FROM에 테이블을 여러개 기입시
- Cartesian Product를 리턴
- 3 * 3 => 9개의 레코드
- 여기서 WHERE을 적용하면 되긴함

SELECT * 
FROM Users, Orders;
WHERE Users.id = Orders.userId;
- Old school 방식

------------------------------------------------------------

- 새로운 방식인 INNER JOIN을 사용하자 
- 교집합 (양쪽 테이블 모두에 데이터가 있어야함)

SELECT *
FROM Users
    INNER JOIN Orders ON Users.id = Orders.userId;


SELECT *
FROM Orders
    INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID;


- 3개의 테이블을 조인
SELECT *
FROM Orders
    INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID
    INNER JOIN Shippers ON Orders.shipperID = Shippers.shipperID;


- 조인키 간 이름이 다를 수 있다.
- 이를 명확히 하기 위해 ERD를 알자


- entity relation diagram
- 테이블간의 관계를 도식화

------------------------------------------------------------

1. https://www.hackerrank.com/challenges/african-cities/problem

SELECT CITY.name
FROM CITY
    INNER JOIN COUNTRY ON CITY.countrycode = COUNTRY.code
WHERE COUNTRY.continent = 'Africa';


2. https://www.hackerrank.com/challenges/asian-population/problem

SELECT SUM(CITY.Population)
FROM CITY
    INNER JOIN COUNTRY ON CITY.CountryCode = COUNTRY.Code
WHERE COUNTRY.continent = 'Asia';


3. https://www.hackerrank.com/challenges/average-population-of-each-continent/problem

SELECT COUNTRY.continent, FLOOR(AVG(CITY.Population))
FROM CITY
    INNER JOIN COUNTRY ON CITY.CountryCode = COUNTRY.Code
GROUP BY COUNTRY.continent;